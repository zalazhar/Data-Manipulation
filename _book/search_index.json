[
["index.html", "THE ULTIMATE GUIDE TO DATA MANIPULATION WITH R AND PYTHON Chapter 1 Klm", " THE ULTIMATE GUIDE TO DATA MANIPULATION WITH R AND PYTHON Zakaria Al Azhar, bigdatahabits.com 2017-11-12 Chapter 1 Klm This is a sample book written in Markdown. You can use anything that Pandoc’s Markdown supports, e.g., a math equation \\(a^2 + b^2 = c^2\\). The bookdown package can be installed from CRAN or Github: install.packages(&quot;bookdown&quot;) # or the development version # devtools::install_github(&quot;rstudio/bookdown&quot;) Remember each Rmd file contains one and only one chapter, and a chapter is defined by the first-level heading #. To compile this example to PDF, you need to install XeLaTeX. "],
["intro.html", "Chapter 2 Introduction", " Chapter 2 Introduction Before you can really mine your data for insights you need to clean it up. Even though it’s always good practice to create a clean, well-structured data set, sometimes it’s not always possible. Data sets can come in all shapes and sizes (some good, some not so good!), especially when you’re getting it from the web. Data manipulation refers to a set of skills of changing data in an effort to make it easier to read or be more organized, with the eventual goal to get and present insight. In this book we cover the most used formulas of data manipulation, and show how to implement the formulas with R and Python. The formulas are classified into the following sections: Column formulas Binning: grouping data in intervals Convert and Replace: casting datatypes, converting, replacing and column renaming. Filter: Inclusion, Exclusion, Selecting, and Searching….. Split and Combine: Splitting, Aggregating, Combining, Merging, Joining, and Appending Transform: Converting, Comparing, Restorting, Lagging, Missing Value, Normalizing/Denormalizing, One To Many, Many to One, String manipulation, Subsetting. Row formulas Filter: Row filter, and Data Splitting Transform: Concatenate, Group by, Ungroup, Partitioning, Pivoting, Unpivioting, Sampling, and Sorting. "],
["prerequisites.html", "Chapter 3 Prerequisites 3.1 Basic knowledge 3.2 Dataset 3.3 Python and R packages", " Chapter 3 Prerequisites 3.1 Basic knowledge We assume basic knowledge of Python or R: knowing how to ecexute code in your favourite IDE. 3.2 Dataset We use the Titanic Dataset to implement the data manipulation formulas. The dataset can be downloaded as a csv file from Kaggle: 3.3 Python and R packages R: I’ve delibarately chosen to implement the formulas in base R, and not depend on additional R packages, such as dplyr. The main reason is that understanding base first, makes switching to other packages much easier. The other way around doesn’t always hold. Python: The Python implemantations of the formulas are done using the library pandas. For more instructions on installing pandas on yoor computer, see [(https://pandas.pydata.org/pandas-docs/stable/install.html)] "],
["data-exploration.html", "Chapter 4 Data Exploration 4.1 Data Structure 4.2 Data Summary", " Chapter 4 Data Exploration Before starting with data manipulation or anything else, we begin with exploring the dataset. 4.1 Data Structure Let’s have a look at the data structure of the Titanic dataset: R # read the dataset titanic &lt;- read.csv(&quot;titanic.csv&quot;, stringsAsFactors = FALSE) # give us the data stucture str(titanic) ## &#39;data.frame&#39;: 891 obs. of 12 variables: ## $ PassengerId: int 1 2 3 4 5 6 7 8 9 10 ... ## $ Survived : int 0 1 1 1 0 0 0 0 1 1 ... ## $ Pclass : int 3 1 3 1 3 3 1 3 3 2 ... ## $ Name : chr &quot;Braund, Mr. Owen Harris&quot; &quot;Cumings, Mrs. John Bradley (Florence Briggs Thayer)&quot; &quot;Heikkinen, Miss. Laina&quot; &quot;Futrelle, Mrs. Jacques Heath (Lily May Peel)&quot; ... ## $ Sex : chr &quot;male&quot; &quot;female&quot; &quot;female&quot; &quot;female&quot; ... ## $ Age : num 22 38 26 35 35 NA 54 2 27 14 ... ## $ SibSp : int 1 1 0 1 0 0 0 3 0 1 ... ## $ Parch : int 0 0 0 0 0 0 0 1 2 0 ... ## $ Ticket : chr &quot;A/5 21171&quot; &quot;PC 17599&quot; &quot;STON/O2. 3101282&quot; &quot;113803&quot; ... ## $ Fare : num 7.25 71.28 7.92 53.1 8.05 ... ## $ Cabin : chr &quot;&quot; &quot;C85&quot; &quot;&quot; &quot;C123&quot; ... ## $ Embarked : chr &quot;S&quot; &quot;C&quot; &quot;S&quot; &quot;S&quot; ... The output gives us a good overview of the columns and its data structure, plus some preview of data. We can derive that the number of numeric columns is almost equal to the number of the character columns Python import pandas as pd # read the data set titanic = pd.read_csv(&quot;titanic.csv&quot;) # print the data structure print titanic.dtypes ## PassengerId int64 ## Survived int64 ## Pclass int64 ## Name object ## Sex object ## Age float64 ## SibSp int64 ## Parch int64 ## Ticket object ## Fare float64 ## Cabin object ## Embarked object ## dtype: object The Python ouptut is briefer than the R variant. Nevertheless, it gives a nice overview of the underlying structure. Interesting to note is that Python labels some columns as “object”, while in R the same columns have been labeled as character. The reason is that these columns contain different data types, causing Pandas to label it as “object”. 4.2 Data Summary To get a bird eye view of the data, we can make a summary: summary(titanic) ## PassengerId Survived Pclass Name ## Min. : 1.0 Min. :0.0000 Min. :1.000 Length:891 ## 1st Qu.:223.5 1st Qu.:0.0000 1st Qu.:2.000 Class :character ## Median :446.0 Median :0.0000 Median :3.000 Mode :character ## Mean :446.0 Mean :0.3838 Mean :2.309 ## 3rd Qu.:668.5 3rd Qu.:1.0000 3rd Qu.:3.000 ## Max. :891.0 Max. :1.0000 Max. :3.000 ## ## Sex Age SibSp Parch ## Length:891 Min. : 0.42 Min. :0.000 Min. :0.0000 ## Class :character 1st Qu.:20.12 1st Qu.:0.000 1st Qu.:0.0000 ## Mode :character Median :28.00 Median :0.000 Median :0.0000 ## Mean :29.70 Mean :0.523 Mean :0.3816 ## 3rd Qu.:38.00 3rd Qu.:1.000 3rd Qu.:0.0000 ## Max. :80.00 Max. :8.000 Max. :6.0000 ## NA&#39;s :177 ## Ticket Fare Cabin Embarked ## Length:891 Min. : 0.00 Length:891 Length:891 ## Class :character 1st Qu.: 7.91 Class :character Class :character ## Mode :character Median : 14.45 Mode :character Mode :character ## Mean : 32.20 ## 3rd Qu.: 31.00 ## Max. :512.33 ## import pandas as pd titanic = pd.read_csv(&quot;titanic.csv&quot;) print titanic.describe() ## PassengerId Survived Pclass Age SibSp \\ ## count 891.000000 891.000000 891.000000 714.000000 891.000000 ## mean 446.000000 0.383838 2.308642 29.699118 0.523008 ## std 257.353842 0.486592 0.836071 14.526497 1.102743 ## min 1.000000 0.000000 1.000000 0.420000 0.000000 ## 25% 223.500000 0.000000 2.000000 20.125000 0.000000 ## 50% 446.000000 0.000000 3.000000 28.000000 0.000000 ## 75% 668.500000 1.000000 3.000000 38.000000 1.000000 ## max 891.000000 1.000000 3.000000 80.000000 8.000000 ## ## Parch Fare ## count 891.000000 891.000000 ## mean 0.381594 32.204208 ## std 0.806057 49.693429 ## min 0.000000 0.000000 ## 25% 0.000000 7.910400 ## 50% 0.000000 14.454200 ## 75% 0.000000 31.000000 ## max 6.000000 512.329200 "],
["column-formulas.html", "Chapter 5 Column Formulas 5.1 Data Binning", " Chapter 5 Column Formulas After obtaining a good overview of the data, we can move to the next step: manipulating data. In this chapter we present the most used data manipulaton formulas on one ore more columns. 5.1 Data Binning Data Binning is about grouping data in intervals - called bins. For example, in the titanic dataset we’ve measured the age in years, but you wanted to have age categories as follows: 1 = Child , age ranges of 0-17 2 = Adult, age ranges of 18-39 3 = Middle Aged, age ranges of 40-59 4 = Over 60, age ranges of 60 and above R titanic = read.csv(&quot;titanic.csv&quot;) #define the left edges of the age categories and the corresponding labels: edges &lt;- c(0,18,40,60, 120) labels &lt;- c(&quot;Child&quot;,&quot;Adult&quot;,&quot;Middle Aged&quot;,&quot;Over 60&quot;) # we can break the ages in categories with the cut function age.categories &lt;- cut(titanic$Age,breaks = edges, right = FALSE, labels = labels) # print the first 50 age items and the corresponding age categories) age.categories[1:50] ## [1] Adult Adult Adult Adult Adult ## [6] &lt;NA&gt; Middle Aged Child Adult Child ## [11] Child Middle Aged Adult Adult Child ## [16] Middle Aged Child &lt;NA&gt; Adult &lt;NA&gt; ## [21] Adult Adult Child Adult Child ## [26] Adult &lt;NA&gt; Adult &lt;NA&gt; &lt;NA&gt; ## [31] Middle Aged &lt;NA&gt; &lt;NA&gt; Over 60 Adult ## [36] Middle Aged &lt;NA&gt; Adult Adult Child ## [41] Middle Aged Adult &lt;NA&gt; Child Adult ## [46] &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; Adult ## Levels: Child Adult Middle Aged Over 60 PYTHON import pandas as pd titanic = pd.read_csv(&quot;titanic.csv&quot;) labels = [&quot;Child&quot;,&quot;Adult&quot;,&quot;Middle Aged&quot;, &quot;Over 60&quot;] edges = [0,18,40,60, 120] age_categories = pd.cut(titanic[&quot;Age&quot;], edges, labels=labels) print age_categories ## 0 Adult ## 1 Adult ## 2 Adult ## 3 Adult ## 4 Adult ## 5 NaN ## 6 Middle Aged ## 7 Child ## 8 Adult ## 9 Child ## 10 Child ## 11 Middle Aged ## 12 Adult ## 13 Adult ## 14 Child ## 15 Middle Aged ## 16 Child ## 17 NaN ## 18 Adult ## 19 NaN ## 20 Adult ## 21 Adult ## 22 Child ## 23 Adult ## 24 Child ## 25 Adult ## 26 NaN ## 27 Adult ## 28 NaN ## 29 NaN ## ... ## 861 Adult ## 862 Middle Aged ## 863 NaN ## 864 Adult ## 865 Middle Aged ## 866 Adult ## 867 Adult ## 868 NaN ## 869 Child ## 870 Adult ## 871 Middle Aged ## 872 Adult ## 873 Middle Aged ## 874 Adult ## 875 Child ## 876 Adult ## 877 Adult ## 878 NaN ## 879 Middle Aged ## 880 Adult ## 881 Adult ## 882 Adult ## 883 Adult ## 884 Adult ## 885 Adult ## 886 Adult ## 887 Adult ## 888 NaN ## 889 Adult ## 890 Adult ## Name: Age, Length: 891, dtype: category ## Categories (4, object): [Child &lt; Adult &lt; Middle Aged &lt; Over 60] Python Output "],
["final-words-and-this-is-strange.html", "Chapter 6 Final Words and this is strange", " Chapter 6 Final Words and this is strange We have finished a nice book. "],
["references.html", "References", " References "]
]
